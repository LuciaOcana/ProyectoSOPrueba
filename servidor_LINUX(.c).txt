#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <mysql.h>
//#include <pthread.h>


int PartidasGanadas()
{
	MYSQL * conn;
	int err;
	MYSQL_RES * resultado;
	MYSQL_ROW row;
	int partidas_ganadas;
	
	
	/*Antes de ejecutar nuestro programa en c tenemos que:
	- Entrar en el directorio (desde consola) donde tenemos ubicados los archivos necesarios (num_partidas_ganadas_Juan.sql).
	- Introducir el comando "mysql -u root -p" y introducir contrase￱a "mysql".
	- Introducir el comando "source num_partidas_ganadas_Juan.sql;".
	- Abrir el codigo en c y ejecutarlo.
	*NOTA* : si no sigue estos pasos, no se realizara correctamente el programa ni se actualizaran los datos del fichero .sql, por tanto
	cada vez que actualize dicho fichero .sql tendra que introducir el comando "source num_partidas_ganadas_Juan.sql" para actualizar
	los datos.*/
	
	
	//Creamos la conexi￳n a MYSQL
	conn = mysql_init(NULL);
	if (conn == NULL)
	{
		printf("Error al crear la connexi￳n: %u %s \n", mysql_errno(conn), mysql_error(conn));
		exit(1);
	}
	
	conn = mysql_real_connect(conn,"localhost","root","mysql","parchis",0,NULL,0);
	if (conn == NULL)
	{
		printf("Error al inicializar la conexi￳n: %u %s \n", mysql_errno(conn), mysql_error(conn));
		exit(1);
	}
	
	err = mysql_query(conn, "SELECT * FROM jugadores WHERE jugadores.usuario = 'Juan'");
	if (err != 0)
	{
		printf("Error al consultar datos de la base %u %s \n",mysql_errno(conn),mysql_error(conn));
		exit(1);
	}
	resultado = mysql_store_result(conn);
	row = mysql_fetch_row(resultado);
	
	if (row == NULL)
	{
		printf("No se ha obtenido la consulta \n");
		
	}
	else
	{
		partidas_ganadas = atoi(row[3]);
		printf("Juan ha ganado %d partidas!", partidas_ganadas);
	}
	return 0;
}

int main(int argc, char *argv[])
{
	//HOLA
	int sock_conn, sock_listen, ret;
	struct sockaddr_in serv_adr;
	char peticion[512];
	char respuesta[512];
	// INICIALITZACIONS
	// Obrim el socket
	if ((sock_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		printf("Error creant socket");
	// Fem el bind al port
	memset(&serv_adr, 0, sizeof(serv_adr));// inicialitza a zero serv_addr
	serv_adr.sin_family = AF_INET;
	// asocia el socket a cualquiera de las IP de la m?quina. 
	//htonl formatea el numero que recibe al formato necesario
	serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
	// escucharemos en el port 9050
	serv_adr.sin_port = htons(9070);
	if (bind(sock_listen, (struct sockaddr *) &serv_adr, sizeof(serv_adr)) < 0)
		printf ("Error al bind");
	//La cola de peticiones pendientes no podr? ser superior a 4
	if (listen(sock_listen, 4) < 0)
		printf("Error en el Listen");
	int i;
	
	
	// Atenderemos solo 10 peticione
	for(i=0;i<10;i++){
		printf ("Escuchando\n");
		
		sock_conn = accept(sock_listen, NULL, NULL);
		printf ("He recibido conexi?n\n");
		//sock_conn es el socket que usaremos para este cliente
		
		// Ahora recibimos su peticion
		ret=read(sock_conn,peticion, sizeof(peticion));
		printf ("Recibida una peticiￃﾳn\n");
		// Tenemos que a?adirle la marca de fin de string 
		// para que no escriba lo que hay despues en el buffer
		peticion[ret]='\0';
		
		//Escribimos la peticion en la consola
		
		printf ("La peticiￃﾳn es: %s\n",peticion);
		char *p = strtok(peticion, "/");
		int codigo =  atoi (p);
		p = strtok( NULL, "/");
		char nombre[20];
		strcpy (nombre, p);
		printf ("Codigo: %d, Nombre: %s\n", codigo, nombre);
		int PG;
		
		if (codigo ==1) //piden las partidas ganadas
			
			PG = PartidasGanadas();
		
			sprintf (respuesta,"%d",PG);
		/*else
			// quieren saber si el nombre es bonito
			if((nombre[0]=='M') || (nombre[0]=='S'))
			strcpy (respuesta,"SI");
			else
				strcpy (respuesta,"NO");*/
			
			// Enviamos la respuesta
			write (sock_conn,respuesta, strlen(respuesta));
			
			// Se acabo el servicio para este cliente
			close(sock_conn); 
	}
}

